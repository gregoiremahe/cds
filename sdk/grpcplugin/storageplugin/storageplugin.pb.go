// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storageplugin.proto

package storageplugin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StoragePluginManifest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Author               string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoragePluginManifest) Reset()         { *m = StoragePluginManifest{} }
func (m *StoragePluginManifest) String() string { return proto.CompactTextString(m) }
func (*StoragePluginManifest) ProtoMessage()    {}
func (*StoragePluginManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a64756397ac6d70, []int{0}
}

func (m *StoragePluginManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StoragePluginManifest.Unmarshal(m, b)
}
func (m *StoragePluginManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StoragePluginManifest.Marshal(b, m, deterministic)
}
func (m *StoragePluginManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoragePluginManifest.Merge(m, src)
}
func (m *StoragePluginManifest) XXX_Size() int {
	return xxx_messageInfo_StoragePluginManifest.Size(m)
}
func (m *StoragePluginManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_StoragePluginManifest.DiscardUnknown(m)
}

var xxx_messageInfo_StoragePluginManifest proto.InternalMessageInfo

func (m *StoragePluginManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StoragePluginManifest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StoragePluginManifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StoragePluginManifest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type Options struct {
	Options              map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a64756397ac6d70, []int{1}
}

func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

type Result struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Details              string   `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a64756397ac6d70, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Result) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func init() {
	proto.RegisterType((*StoragePluginManifest)(nil), "storageplugin.StoragePluginManifest")
	proto.RegisterType((*Options)(nil), "storageplugin.Options")
	proto.RegisterMapType((map[string]string)(nil), "storageplugin.Options.OptionsEntry")
	proto.RegisterType((*Result)(nil), "storageplugin.Result")
}

func init() { proto.RegisterFile("storageplugin.proto", fileDescriptor_1a64756397ac6d70) }

var fileDescriptor_1a64756397ac6d70 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xeb, 0x90, 0xd0, 0x29, 0x45, 0xd1, 0x42, 0x23, 0xcb, 0x5c, 0x22, 0xc3, 0x21, 0xa7,
	0xad, 0x54, 0x2e, 0x55, 0x04, 0x87, 0x36, 0x94, 0x03, 0x12, 0xaa, 0x15, 0x8b, 0x0b, 0xb7, 0xad,
	0xbd, 0xb1, 0x57, 0xdd, 0x78, 0xad, 0xdd, 0xb1, 0x51, 0x4e, 0x5c, 0xf8, 0x4e, 0xbe, 0x05, 0x79,
	0xbd, 0x46, 0x75, 0xd5, 0x1e, 0x0a, 0x27, 0xcf, 0xcc, 0x7b, 0x6f, 0xb4, 0xef, 0x8d, 0x0c, 0xaf,
	0x0c, 0x2a, 0xcd, 0x72, 0x5e, 0xc9, 0x3a, 0x17, 0x25, 0xad, 0xb4, 0x42, 0x45, 0x8e, 0x07, 0xc3,
	0xf0, 0x4d, 0xae, 0x54, 0x2e, 0xf9, 0xa9, 0x05, 0x6f, 0xea, 0xed, 0x29, 0xdf, 0x55, 0xb8, 0xef,
	0xb8, 0xd1, 0x4f, 0x38, 0x49, 0x3a, 0x76, 0x6c, 0xd9, 0x5f, 0x59, 0x29, 0xb6, 0xdc, 0x20, 0x21,
	0x30, 0x2e, 0xd9, 0x8e, 0x07, 0xde, 0xc2, 0x5b, 0x1e, 0x6e, 0x6c, 0x4d, 0x02, 0x98, 0x36, 0x5c,
	0x1b, 0xa1, 0xca, 0xe0, 0xc0, 0x8e, 0xfb, 0x96, 0x2c, 0xe0, 0x28, 0xe3, 0x26, 0xd5, 0xa2, 0xc2,
	0x16, 0xf5, 0x2d, 0x7a, 0x77, 0x44, 0xe6, 0x30, 0x61, 0x35, 0x16, 0x4a, 0x07, 0x63, 0x0b, 0xba,
	0x2e, 0xfa, 0xe5, 0xc1, 0xf4, 0xda, 0x52, 0x0c, 0xf9, 0x08, 0x53, 0xd5, 0x95, 0x81, 0xb7, 0xf0,
	0x97, 0x47, 0x67, 0x6f, 0xe9, 0xd0, 0x9f, 0x23, 0xf6, 0xdf, 0xab, 0x12, 0xf5, 0x7e, 0xd3, 0x6b,
	0xc2, 0x15, 0xbc, 0xb8, 0x0b, 0x90, 0x19, 0xf8, 0xb7, 0x7c, 0xef, 0x1c, 0xb4, 0x25, 0x79, 0x0d,
	0xcf, 0x1a, 0x26, 0x6b, 0xee, 0x9e, 0xdf, 0x35, 0xab, 0x83, 0x73, 0x2f, 0x5a, 0xc1, 0x64, 0xc3,
	0x4d, 0x2d, 0xb1, 0x7d, 0xa8, 0x41, 0x86, 0xb5, 0x71, 0x42, 0xd7, 0xb5, 0xe6, 0x33, 0x8e, 0x4c,
	0x48, 0xd3, 0x9b, 0x77, 0xed, 0xd9, 0x6f, 0x1f, 0x8e, 0x07, 0x21, 0x92, 0x2f, 0xf0, 0xfc, 0x6f,
	0x90, 0x73, 0xda, 0xe5, 0x4f, 0xfb, 0xfc, 0xe9, 0x55, 0x9b, 0x7f, 0xf8, 0xee, 0x9e, 0xb7, 0x07,
	0xcf, 0x10, 0x8d, 0xc8, 0x39, 0x8c, 0x13, 0x54, 0xd5, 0xa3, 0x7b, 0x1e, 0x99, 0x47, 0x23, 0xb2,
	0x86, 0xd9, 0x85, 0x46, 0xb1, 0x65, 0x29, 0x7e, 0x52, 0x3f, 0x4a, 0xa9, 0x58, 0x46, 0xe6, 0x0f,
	0x27, 0x1a, 0x9e, 0xdc, 0x9b, 0x77, 0x61, 0x44, 0x23, 0x72, 0x01, 0x2f, 0xfb, 0x25, 0xdf, 0xaa,
	0x7f, 0x5b, 0xb1, 0x86, 0x59, 0xc2, 0x75, 0xc3, 0x13, 0x64, 0x28, 0xd2, 0xcf, 0x42, 0x72, 0xf3,
	0xf4, 0x25, 0x1f, 0xe0, 0x70, 0xcd, 0xd2, 0x82, 0xc7, 0xb5, 0x94, 0xff, 0xa3, 0x36, 0xc5, 0x93,
	0xd5, 0x97, 0xd7, 0xb0, 0x4c, 0xd5, 0x8e, 0xaa, 0xa6, 0xa0, 0x69, 0x66, 0xa8, 0xc9, 0x6e, 0x69,
	0xae, 0xab, 0xd4, 0xd1, 0x06, 0xa2, 0x4b, 0x32, 0xb8, 0x63, 0xdc, 0xde, 0x24, 0xf6, 0xbe, 0x0f,
	0x7f, 0xc9, 0x9b, 0x89, 0xbd, 0xd5, 0xfb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x6d, 0x73,
	0x6c, 0xbf, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StoragePluginClient is the client API for StoragePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoragePluginClient interface {
	Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StoragePluginManifest, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ArtifactDownload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	ArtifactUpload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	ServeStaticFiles(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	CachePull(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
	CachePush(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error)
}

type storagePluginClient struct {
	cc *grpc.ClientConn
}

func NewStoragePluginClient(cc *grpc.ClientConn) StoragePluginClient {
	return &storagePluginClient{cc}
}

func (c *storagePluginClient) Manifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StoragePluginManifest, error) {
	out := new(StoragePluginManifest)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/Manifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) ArtifactDownload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/ArtifactDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) ArtifactUpload(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/ArtifactUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) ServeStaticFiles(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/ServeStaticFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) CachePull(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/CachePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagePluginClient) CachePush(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/storageplugin.StoragePlugin/CachePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoragePluginServer is the server API for StoragePlugin service.
type StoragePluginServer interface {
	Manifest(context.Context, *empty.Empty) (*StoragePluginManifest, error)
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
	ArtifactDownload(context.Context, *Options) (*Result, error)
	ArtifactUpload(context.Context, *Options) (*Result, error)
	ServeStaticFiles(context.Context, *Options) (*Result, error)
	CachePull(context.Context, *Options) (*Result, error)
	CachePush(context.Context, *Options) (*Result, error)
}

func RegisterStoragePluginServer(s *grpc.Server, srv StoragePluginServer) {
	s.RegisterService(&_StoragePlugin_serviceDesc, srv)
}

func _StoragePlugin_Manifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).Manifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/Manifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).Manifest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_ArtifactDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).ArtifactDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/ArtifactDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).ArtifactDownload(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_ArtifactUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).ArtifactUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/ArtifactUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).ArtifactUpload(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_ServeStaticFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).ServeStaticFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/ServeStaticFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).ServeStaticFiles(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_CachePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).CachePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/CachePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).CachePull(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoragePlugin_CachePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragePluginServer).CachePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageplugin.StoragePlugin/CachePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragePluginServer).CachePush(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoragePlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storageplugin.StoragePlugin",
	HandlerType: (*StoragePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manifest",
			Handler:    _StoragePlugin_Manifest_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StoragePlugin_Stop_Handler,
		},
		{
			MethodName: "ArtifactDownload",
			Handler:    _StoragePlugin_ArtifactDownload_Handler,
		},
		{
			MethodName: "ArtifactUpload",
			Handler:    _StoragePlugin_ArtifactUpload_Handler,
		},
		{
			MethodName: "ServeStaticFiles",
			Handler:    _StoragePlugin_ServeStaticFiles_Handler,
		},
		{
			MethodName: "CachePull",
			Handler:    _StoragePlugin_CachePull_Handler,
		},
		{
			MethodName: "CachePush",
			Handler:    _StoragePlugin_CachePush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storageplugin.proto",
}
